{"version":3,"sources":["components/Button/constants/enums.js","components/Button/constants/buttonTypes.js","components/Button/Button.js","components/PageHeader/PageHeader.js","components/PageContainer/PageContainer.js","components/Loader/Loader.js","pages/Main/UsersTable/UsersTableRow.js","pages/Main/UsersTable/UsersTable.js","graphql/mutations/usersMutations.js","graphql/queries/usersQueries.js","pages/Main/UsersTable/hooks/useSelectedUsers.js","context/useUsersContext.js","pages/Main/MainPage.js","pages/UserDetails/UserNameInput/UserNameInput.js","shared/hooks/useURLSearchParams.js","context/useUserDetailsContext.js","shared/constants/userRoles.js","pages/UserDetails/UserRoles/UserRoles.js","pages/UserDetails/UserDetailsPage.js","AppRouter.js","env.js","graphql/apolloClient.js","index.js"],"names":["btnClsEnum","btnLabelEnum","Button","onClick","label","isDisabled","type","customCls","btnCls","buttonLabel","disabled","className","PageHeader","headerTitle","headerBtnProps","pageHeaderCls","PageContainer","children","pageTitle","pageHeaderButtonProps","Loader","width","rest","style","height","noop","UsersTableRow","email","name","role","showCheckbox","rowCls","isSelected","selectedCls","userDetailsLink","checked","onChange","to","UserTableHeader","UsersTable","checkIfUserIsSelected","handleSelectUser","resetUsers","usersAreLoading","users","map","user","isUserSelected","key","UPDATE_USER_MUTATION","gql","DELETE_USERS_MUTATION","RESET_USERS_MUTATION","ALL_USERS_QUERY","USER_QUERY","useSelectedUsers","useState","selectedUsers","setSelectedUsers","includes","updatedSelectedUsers","filter","selectedUser","clearSelectedUsers","i","UsersContext","createContext","UsersContextProvider","isLoading","setLoading","setUsers","refetchUsers","useQuery","onCompleted","allUsers","fetchPolicy","refetch","useMutation","variables","emails","updateUsers","deleteUsers","data","updatedUsers","Provider","value","MainPage","useContext","deleteUsersBtnProps","length","UserNameInput","userName","handleUserNameChange","htmlFor","id","placeholder","useURLSearchParams","param","useSearchParams","get","UserDetailsContext","UserDetailsContextProvider","userEmail","formIsDirty","setFormDirty","initialName","setInitialName","initialRole","setInitialRole","setUserName","userRole","setUserRole","newAttributes","updateUser","useEffect","userDetailsAreLoading","handleUpdateUser","target","handleUserRoleChange","userRoles","userRoleLabelsEnum","UserRole","getRoleLabel","defaultChecked","UserRoles","activeRole","handleRoleChange","isRoleSelected","UserDetailsPage","saveUserBtnProps","AppRouter","useRoutes","path","element","client","ApolloClient","uri","env","request","operation","setContext","headers","Root","apolloClient","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c29e79a.chunk.js","sourcesContent":["import { DELETE_BTN_TYPE, RESET_BTN_TYPE, SAVE_BTN_TYPE } from './buttonTypes';\n\nexport const btnClsEnum = {\n  [SAVE_BTN_TYPE]: 'save-btn',\n  [DELETE_BTN_TYPE]: 'delete-btn',\n  [RESET_BTN_TYPE]: 'reset-btn',\n};\n\nexport const btnLabelEnum = {\n  [SAVE_BTN_TYPE]: 'Save',\n  [DELETE_BTN_TYPE]: 'Delete',\n  [RESET_BTN_TYPE]: 'Reset Users',\n};\n","export const DELETE_BTN_TYPE = 'delete';\nexport const SAVE_BTN_TYPE = 'save';\nexport const RESET_BTN_TYPE = 'reset';\n","import React from 'react';\nimport './button.scss';\nimport { btnClsEnum, btnLabelEnum } from './constants/enums';\n\nconst Button = ({ onClick, label, isDisabled, type, customCls }) => {\n  const btnCls = btnClsEnum[type] || '';\n  const buttonLabel = label || btnLabelEnum[type];\n  return (\n    <button onClick={onClick} disabled={isDisabled} className={`btn ${btnCls} ${customCls}`}>\n      {buttonLabel}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport Button from '../Button/Button';\nimport './pageHeader.scss';\n\nexport const PageHeader = ({ headerTitle, headerBtnProps, pageHeaderCls = '' }) => {\n  return (\n    <div className={`page-header ${pageHeaderCls}`}>\n      <h1>{headerTitle}</h1>\n      <Button {...headerBtnProps} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { PageHeader } from '../PageHeader/PageHeader';\nimport './pageContainer.scss';\n\nconst PageContainer = ({ children, pageTitle, pageHeaderButtonProps, pageHeaderCls }) => {\n  return (\n    <div className=\"main-page-container\">\n      <PageHeader\n        headerTitle={pageTitle}\n        headerBtnProps={pageHeaderButtonProps}\n        pageHeaderCls={pageHeaderCls}\n      />\n      {children}\n    </div>\n  );\n};\n\nexport default PageContainer;\n","import React from 'react';\nimport './loader.scss';\n\nconst Loader = ({ width = '100px', ...rest }) => (\n  <span className=\"loader\" style={{ width, height: width, ...rest }} />\n);\n\nexport default Loader;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './usersTableRow.scss';\n\nconst noop = () => {};\n\nconst UsersTableRow = ({\n  email,\n  name,\n  role,\n  showCheckbox = true,\n  rowCls = '',\n  isSelected,\n  onClick,\n}) => {\n  const selectedCls = isSelected ? 'selected' : '';\n  const userDetailsLink = `../details?user=${email}`;\n  return (\n    <div className={`users-table-row ${selectedCls} ${rowCls}`} onClick={onClick}>\n      <div className=\"user-table-row-checkbox\">\n        {showCheckbox && <input type=\"checkbox\" checked={isSelected} onChange={noop}/>}\n      </div>\n      <div className=\"user-table-row-value user-id-container\">\n        <p className=\"user-email-value\">\n          {showCheckbox ? <Link to={userDetailsLink}>{email}</Link> : email}\n        </p>\n        <p className=\"user-name-value-mobile\">{name}</p>\n      </div>\n      <p className=\"user-table-row-value user-name-value\">{name}</p>\n      <p className=\"user-table-row-value user-role-value\">{role}</p>\n    </div>\n  );\n};\n\nexport default UsersTableRow;\n","import React from 'react';\nimport Button from '../../../components/Button/Button';\nimport { RESET_BTN_TYPE } from '../../../components/Button/constants/buttonTypes';\nimport Loader from '../../../components/Loader/Loader';\nimport UsersTableRow from './UsersTableRow';\n\nconst UserTableHeader = () => (\n  <UsersTableRow\n    showCheckbox={false}\n    email=\"EMAIL\"\n    name=\"NAME\"\n    role=\"ROLE\"\n    rowCls=\"users-table-labels\"\n  />\n);\n\nconst UsersTable = ({ checkIfUserIsSelected, handleSelectUser, resetUsers, usersAreLoading, users = [] }) => (\n  <>\n    {usersAreLoading && <Loader />}\n    <UserTableHeader />\n    {users.map((user) => {\n      const isUserSelected = checkIfUserIsSelected(user.email);\n      const onUserClick = () => handleSelectUser(user.email);\n      return (\n        <UsersTableRow\n          {...user}\n          isSelected={isUserSelected}\n          onClick={onUserClick}\n          key={user.email}\n        />\n      );\n    })}\n    {!usersAreLoading && <Button onClick={resetUsers} type={RESET_BTN_TYPE}/>}\n  </>\n);\n\nexport default UsersTable;\n","import { gql } from 'apollo-boost';\n\nexport const UPDATE_USER_MUTATION = gql`\n  mutation updateUser($email: ID!, $newAttributes: UserAttributesInput!) {\n    updateUser(email: $email, newAttributes: $newAttributes) {\n      email\n      name\n      role\n    }\n  }\n`;\n\nexport const DELETE_USERS_MUTATION = gql`\n  mutation deleteUsers($emails: [ID]!) {\n    deleteUsers(emails: $emails)\n  }\n`;\n\nexport const RESET_USERS_MUTATION = gql`\n  mutation resetUsers {\n    resetUsers\n  }\n`;\n","import { gql } from 'apollo-boost';\n\nexport const ALL_USERS_QUERY = gql`\n  query getAllUsers {\n    allUsers {\n      email\n      name\n      role\n    }\n  }\n`;\n\nexport const USER_QUERY = gql`\n  query getUser($email: ID!) {\n    user(email: $email) {\n      name\n      role\n      email\n    }\n  }\n`;\n","import { useState } from 'react';\n\nconst useSelectedUsers = () => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n\n  const checkIfUserIsSelected = (user) => selectedUsers.includes(user);\n\n  const clearSelectedUsers = () => setSelectedUsers([]);\n\n  const handleSelectUser = (user) => {\n    const userIsSelected = checkIfUserIsSelected(user);\n\n    let updatedSelectedUsers = [];\n    if (userIsSelected) {\n      updatedSelectedUsers = selectedUsers.filter((selectedUser) => selectedUser !== user);\n    } else {\n      updatedSelectedUsers = [...selectedUsers, user];\n    }\n\n    setSelectedUsers(updatedSelectedUsers);\n  };\n\n  return { selectedUsers, handleSelectUser, checkIfUserIsSelected, clearSelectedUsers };\n};\n\nexport default useSelectedUsers;\n","import React, { useContext, useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { createContext } from 'react';\nimport { DELETE_USERS_MUTATION, RESET_USERS_MUTATION } from '../graphql/mutations/usersMutations';\nimport { ALL_USERS_QUERY } from '../graphql/queries/usersQueries';\nimport useSelectedUsers from '../pages/Main/UsersTable/hooks/useSelectedUsers';\n\nconst UsersContext = createContext(null);\n\nexport const UsersContextProvider = ({ children }) => {\n  const [isLoading, setLoading] = useState(true);\n  const [users, setUsers] = useState([]);\n  const { selectedUsers, handleSelectUser, checkIfUserIsSelected, clearSelectedUsers } =\n    useSelectedUsers();\n\n  const { refetch: refetchUsers } = useQuery(ALL_USERS_QUERY, {\n    onCompleted: ({ allUsers }) => {\n      setUsers(allUsers);\n      setLoading(false);\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const [deleteUsers] = useMutation(DELETE_USERS_MUTATION, {\n    variables: {\n      emails: selectedUsers,\n    },\n    onCompleted: () => {\n      updateUsers();\n      clearSelectedUsers();\n      setLoading(false);\n    }\n  });\n\n  const [resetUsers] = useMutation(RESET_USERS_MUTATION, {\n    onCompleted: async () => {\n      const { data } = await refetchUsers();\n      setUsers(data?.allUsers);\n      setLoading(false);\n    }\n  });\n\n  const updateUsers = () => {\n    const updatedUsers = users.filter((user) => !checkIfUserIsSelected(user.email))\n    setUsers(updatedUsers);\n  }\n\n  const handleDeleteUsers = () => {\n    setLoading(true);\n    deleteUsers();\n  };\n\n  const handleResetUsers = () => {\n    setLoading(true);\n    resetUsers();\n  }\n\n  return (\n    <UsersContext.Provider\n      value={{\n        selectedUsers,\n        users,\n        usersAreLoading: isLoading,\n        handleSelectUser,\n        checkIfUserIsSelected,\n        deleteUsers: handleDeleteUsers,\n        resetUsers: handleResetUsers\n      }}\n    >\n      {children}\n    </UsersContext.Provider>\n  );\n};\n\nexport const useUsersContext = () => useContext(UsersContext);\n","import React from 'react';\nimport PageContainer from '../../components/PageContainer/PageContainer';\nimport UsersTable from './UsersTable/UsersTable';\nimport { UsersContextProvider, useUsersContext } from '../../context/useUsersContext';\nimport { DELETE_BTN_TYPE } from '../../components/Button/constants/buttonTypes';\nimport './mainPage.scss';\n\nconst MainPage = () => {\n  const {\n    selectedUsers,\n    checkIfUserIsSelected,\n    handleSelectUser,\n    deleteUsers,\n    resetUsers,\n    users,\n    usersAreLoading,\n  } = useUsersContext();\n\n  const deleteUsersBtnProps = {\n    onClick: deleteUsers,\n    isDisabled: !selectedUsers.length || usersAreLoading,\n    type: DELETE_BTN_TYPE,\n  };\n\n  return (\n    <PageContainer pageTitle=\"Users\" pageHeaderButtonProps={deleteUsersBtnProps}>\n      <UsersTable\n        resetUsers={resetUsers}\n        handleSelectUser={handleSelectUser}\n        selectedUsers={selectedUsers}\n        usersAreLoading={usersAreLoading}\n        users={users}\n        checkIfUserIsSelected={checkIfUserIsSelected}\n      />\n    </PageContainer>\n  );\n};\n\nexport default () => (\n  <UsersContextProvider>\n    <MainPage />\n  </UsersContextProvider>\n);\n","import React from 'react';\n\nconst UserNameInput = ({ userName, handleUserNameChange }) => (\n  <div className=\"user-name-input-container\">\n    <label htmlFor=\"userName\">Name</label>\n    <input\n      id=\"userName\"\n      placeholder=\"Type in user full name\"\n      value={userName}\n      onChange={handleUserNameChange}\n    />\n  </div>\n);\n\nexport default UserNameInput;\n","import { useSearchParams } from 'react-router-dom';\n\nconst useURLSearchParams = (param) => {\n  const [searchParams] = useSearchParams();\n  const searchParam = searchParams.get(param);\n\n  return searchParam;\n};\n\nexport default useURLSearchParams;\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { UPDATE_USER_MUTATION } from '../graphql/mutations/usersMutations';\nimport { USER_QUERY } from '../graphql/queries/usersQueries';\nimport useURLSearchParams from '../shared/hooks/useURLSearchParams';\n\nconst UserDetailsContext = createContext(null);\n\nexport const UserDetailsContextProvider = ({ children }) => {\n  const userEmail = useURLSearchParams('user');\n\n  // We introduce this piece of state so we know if the user details have been modified.\n  // If not, we'll disable the Save button to avoid unnecessary network calls\n  const [formIsDirty, setFormDirty] = useState(false);\n  const [initialName, setInitialName] = useState('');\n  const [initialRole, setInitialRole] = useState('');\n\n  const [isLoading, setLoading] = useState(true);\n  const [userName, setUserName] = useState('');\n  const [userRole, setUserRole] = useState('');\n\n  const handleUserNameChange = ({ target }) => setUserName(target.value || '');\n  const handleUserRoleChange = ({ target }) => setUserRole(target.value || '');\n\n  useQuery(USER_QUERY, {\n    variables: {\n      email: userEmail,\n    },\n    onCompleted: ({ user }) => {\n      setLoading(false);\n      setUserName(user.name);\n      setInitialName(user.name);\n      setUserRole(user.role);\n      setInitialRole(user.role);\n    },\n  });\n\n  const [updateUser] = useMutation(UPDATE_USER_MUTATION, {\n    variables: {\n      email: userEmail,\n      newAttributes: {\n        name: userName,\n        role: userRole,\n      },\n    },\n    onCompleted: () => setLoading(false),\n  });\n\n  const handleUpdateUser = () => {\n    setLoading(true);\n    updateUser();\n  };\n\n  useEffect(() => {\n    if (initialName === userName && initialRole === userRole) setFormDirty(false);\n    else setFormDirty(true);\n  }, [initialName, initialRole, userName, userRole]);\n\n  return (\n    <UserDetailsContext.Provider\n      value={{\n        userEmail,\n        userRole,\n        userName,\n        formIsDirty,\n        userDetailsAreLoading: isLoading,\n        handleUpdateUser,\n        handleUserNameChange,\n        handleUserRoleChange,\n      }}\n    >\n      {children}\n    </UserDetailsContext.Provider>\n  );\n};\n\nexport const useUserDetailsContext = () => useContext(UserDetailsContext);\n","export const ADMIN_ROLE = 'ADMIN';\nexport const DEVELOPER_ROLE = 'DEVELOPER';\nexport const APP_MANAGER_ROLE = 'APP_MANAGER';\nexport const MARKETING_ROLE = 'MARKETING';\nexport const SALES_ROLE = 'SALES';\n\nexport const userRoles = [ADMIN_ROLE, DEVELOPER_ROLE, APP_MANAGER_ROLE, MARKETING_ROLE, SALES_ROLE];\n\nexport const userRoleLabelsEnum = {\n  [ADMIN_ROLE]: 'Admin',\n  [DEVELOPER_ROLE]: 'Developer',\n  [APP_MANAGER_ROLE]: 'App Manager',\n  [MARKETING_ROLE]: 'Marketing',\n  [SALES_ROLE]: 'Sales',\n};\n","import React from 'react';\nimport { userRoleLabelsEnum, userRoles } from '../../../shared/constants/userRoles';\nimport './userRoles.scss';\n\nconst UserRole = ({ userRole, isSelected }) => {\n  const getRoleLabel = userRoleLabelsEnum[userRole];\n  return (\n    <div className=\"user-role-option\">\n      <input\n        type=\"radio\"\n        id={userRole}\n        value={userRole}\n        name=\"userRoles\"\n        defaultChecked={isSelected}\n        key={userRole}\n      />\n      <label htmlFor={userRole}>{getRoleLabel}</label>\n    </div>\n  );\n};\n\nconst UserRoles = ({ activeRole, handleRoleChange }) => {\n  return (\n    <div className=\"user-roles-radio-group\">\n      <label htmlFor=\"userRoles\">Role</label>\n      <fieldset id=\"userRoles\" onChange={handleRoleChange}>\n        {userRoles.map((userRole) => {\n          const isRoleSelected = userRole === activeRole;\n          return (\n            <UserRole\n              userRole={userRole}\n              key={userRole}\n              isSelected={isRoleSelected}\n            />\n          );\n        })}\n      </fieldset>\n    </div>\n  );\n};\n\nexport default UserRoles;\n","import React from 'react';\nimport { SAVE_BTN_TYPE } from '../../components/Button/constants/buttonTypes';\nimport PageContainer from '../../components/PageContainer/PageContainer';\nimport Loader from '../../components/Loader/Loader';\nimport UserNameInput from './UserNameInput/UserNameInput';\nimport {\n  UserDetailsContextProvider,\n  useUserDetailsContext,\n} from '../../context/useUserDetailsContext';\nimport UserRoles from './UserRoles/UserRoles';\nimport './userDetailsPage.scss';\n\nconst UserDetailsPage = () => {\n  const {\n    userEmail,\n    userRole,\n    userName,\n    formIsDirty,\n    userDetailsAreLoading,\n    handleUpdateUser,\n    handleUserNameChange,\n    handleUserRoleChange,\n  } = useUserDetailsContext();\n\n  const saveUserBtnProps = {\n    onClick: handleUpdateUser,\n    isDisabled: userDetailsAreLoading || !userName || !formIsDirty,\n    type: SAVE_BTN_TYPE,\n  };\n\n  return (\n    <PageContainer\n      pageTitle={userEmail}\n      pageHeaderButtonProps={saveUserBtnProps}\n      pageHeaderCls=\"details-page-header\"\n    >\n      {userDetailsAreLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"details-page-body\">\n          <UserNameInput userName={userName} handleUserNameChange={handleUserNameChange} />\n          <UserRoles activeRole={userRole} handleRoleChange={handleUserRoleChange} />\n        </div>\n      )}\n    </PageContainer>\n  );\n};\n\nexport default () => (\n  <UserDetailsContextProvider>\n    <UserDetailsPage />\n  </UserDetailsContextProvider>\n);\n","import React from 'react';\nimport { Navigate, useRoutes } from 'react-router-dom';\n\nimport MainPage from './pages/Main/MainPage';\nimport UserDetailsPage from './pages/UserDetails/UserDetailsPage';\n\nconst AppRouter = () => {\n  const routes = useRoutes([\n    {\n      path: '/',\n      children: [\n        {\n          path: '/',\n          element: <Navigate to=\"main\" />,\n        },\n        {\n          path: 'main',\n          element: <MainPage />,\n        },\n        { path: 'details', element: <UserDetailsPage /> },\n      ],\n    },\n  ]);\n\n  return routes;\n};\n\nexport default AppRouter;\n","export default {\n    GRAPHQL_ENDPOINT: 'https://dn6jtahorvekvabij3ziq3rsk4.appsync-api.us-east-1.amazonaws.com/graphql',\n    GRAPHQL_API_KEY: 'da2-jfxhcmqg6jhgjjzdca2w2d5o7m'\n};","import ApolloClient from 'apollo-boost';\nimport env from '../env';\n\nconst client = new ApolloClient({\n  uri: env.GRAPHQL_ENDPOINT,\n  request: (operation) => {\n    operation.setContext({\n      headers: {\n        'x-api-key': env.GRAPHQL_API_KEY,\n      },\n    });\n  },\n});\n\nexport default client;\n","import { ApolloProvider } from '@apollo/react-hooks';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport AppRouter from './AppRouter';\nimport apolloClient from './graphql/apolloClient';\nimport './global.scss';\n\nconst Root = () => (\n  <ApolloProvider client={apolloClient}>\n    <HashRouter>\n      <AppRouter />\n    </HashRouter>\n  </ApolloProvider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}