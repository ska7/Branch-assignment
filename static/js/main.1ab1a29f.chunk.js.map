{"version":3,"sources":["components/Button/constants/enums.js","components/Button/constants/buttonTypes.js","components/Button/Button.js","components/PageHeader/PageHeader.js","components/PageContainer/PageContainer.js","components/Loader/Loader.js","shared/utils/utils.js","pages/Main/UsersTable/UsersTableRow.js","pages/Main/UsersTable/UsersTable.js","graphql/mutations/usersMutations.js","graphql/queries/usersQueries.js","pages/Main/UsersTable/hooks/useSelectedUsers.js","context/useUsersContext.js","pages/Main/MainPage.js","pages/UserDetails/UserDetailsPage.js","context/useUserDetailsContext.js","shared/constants/userRoles.js","AppRouter.js","graphql/apolloClient.js","index.js"],"names":["btnClsEnum","btnLabelEnum","Button","onClick","label","isDisabled","type","customCls","btnCls","buttonLabel","disabled","className","PageHeader","headerTitle","headerBtnProps","pageHeaderCls","PageContainer","children","pageTitle","pageHeaderButtonProps","Loader","width","rest","style","height","noop","stopPropagation","e","UsersTableRow","email","name","role","showCheckbox","rowCls","isSelected","selectedCls","userDetailsLink","checked","onChange","to","UserTableHeader","UsersTable","checkIfUserIsSelected","handleSelectUser","resetUsers","usersAreLoading","users","map","user","isUserSelected","key","gql","DELETE_USERS_MUTATION","RESET_USERS_MUTATION","ALL_USERS_QUERY","useSelectedUsers","useState","selectedUsers","setSelectedUsers","includes","updatedSelectedUsers","filter","selectedUser","clearSelectedUsers","UsersContext","createContext","UsersContextProvider","isLoading","setLoading","setUsers","refetchUsers","useQuery","onCompleted","allUsers","fetchPolicy","refetch","useMutation","variables","emails","updateUsers","deleteUsers","a","data","updatedUsers","Provider","value","MainPage","useContext","deleteUsersBtnProps","length","UserDetailsPage","text","setText","text2","setText2","useEffect","setTimeout","AppRouter","useRoutes","path","element","client","ApolloClient","uri","request","operation","setContext","headers","ReactDOM","render","apolloClient","document","getElementById"],"mappings":"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","file":"static/js/main.1ab1a29f.chunk.js","sourcesContent":["import { DELETE_BTN_TYPE, RESET_BTN_TYPE, SAVE_BTN_TYPE } from './buttonTypes';\n\nexport const btnClsEnum = {\n  [SAVE_BTN_TYPE]: 'save-btn',\n  [DELETE_BTN_TYPE]: 'delete-btn',\n  [RESET_BTN_TYPE]: 'reset-btn',\n};\n\nexport const btnLabelEnum = {\n  [SAVE_BTN_TYPE]: 'Save',\n  [DELETE_BTN_TYPE]: 'Delete',\n  [RESET_BTN_TYPE]: 'Reset Users',\n};\n","export const DELETE_BTN_TYPE = 'delete';\nexport const SAVE_BTN_TYPE = 'save';\nexport const RESET_BTN_TYPE = 'reset';\n","import React from 'react';\nimport './button.scss';\nimport { btnClsEnum, btnLabelEnum } from './constants/enums';\n\nconst Button = ({ onClick, label, isDisabled, type, customCls }) => {\n  const btnCls = btnClsEnum[type] || '';\n  const buttonLabel = label || btnLabelEnum[type];\n  return (\n    <button onClick={onClick} disabled={isDisabled} className={`btn ${btnCls} ${customCls}`}>\n      {buttonLabel}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport Button from '../Button/Button';\nimport './pageHeader.scss';\n\nexport const PageHeader = ({ headerTitle, headerBtnProps, pageHeaderCls = '' }) => {\n  return (\n    <div className={`page-header ${pageHeaderCls}`}>\n      <h1>{headerTitle}</h1>\n      <Button {...headerBtnProps} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { PageHeader } from '../PageHeader/PageHeader';\nimport './pageContainer.scss';\n\nconst PageContainer = ({ children, pageTitle, pageHeaderButtonProps, pageHeaderCls }) => {\n  return (\n    <div className=\"main-page-container\">\n      <PageHeader\n        headerTitle={pageTitle}\n        headerBtnProps={pageHeaderButtonProps}\n        pageHeaderCls={pageHeaderCls}\n      />\n      {children}\n    </div>\n  );\n};\n\nexport default PageContainer;\n","import React from 'react';\nimport './loader.scss';\n\nconst Loader = ({ width = '100px', ...rest }) => (\n  <span className=\"loader\" style={{ width, height: width, ...rest }} />\n);\n\nexport default Loader;\n","export const noop = () => {};\nexport const stopPropagation = (e) => e.stopPropagation();","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { noop, stopPropagation } from '../../../shared/utils/utils';\nimport './usersTableRow.scss';\n\nconst UsersTableRow = ({\n  email,\n  name,\n  role,\n  showCheckbox = true,\n  rowCls = '',\n  isSelected,\n  onClick,\n}) => {\n  const selectedCls = isSelected ? 'selected' : '';\n  const userDetailsLink = `../details?user=${email}`;\n  return (\n    <div className={`users-table-row ${selectedCls} ${rowCls}`} onClick={onClick}>\n      <div className=\"user-table-row-checkbox\">\n        {showCheckbox && <input type=\"checkbox\" checked={isSelected} onChange={noop}/>}\n      </div>\n      <div className=\"user-table-row-value user-id-container\">\n        <p className=\"user-email-value\">\n          {showCheckbox ? <Link onClick={stopPropagation} to={userDetailsLink}>{email}</Link> : email}\n        </p>\n        <p className=\"user-name-value-mobile\">{name}</p>\n      </div>\n      <p className=\"user-table-row-value user-name-value\">{name}</p>\n      <p className=\"user-table-row-value user-role-value\">{role}</p>\n    </div>\n  );\n};\n\nexport default UsersTableRow;\n","import React from 'react';\nimport Button from '../../../components/Button/Button';\nimport { RESET_BTN_TYPE } from '../../../components/Button/constants/buttonTypes';\nimport Loader from '../../../components/Loader/Loader';\nimport UsersTableRow from './UsersTableRow';\n\nconst UserTableHeader = () => (\n  <UsersTableRow\n    showCheckbox={false}\n    email=\"EMAIL\"\n    name=\"NAME\"\n    role=\"ROLE\"\n    rowCls=\"users-table-labels\"\n  />\n);\n\nconst UsersTable = ({ checkIfUserIsSelected, handleSelectUser, resetUsers, usersAreLoading, users = [] }) => (\n  <>\n    {usersAreLoading && <Loader />}\n    <UserTableHeader />\n    {users.map((user) => {\n      const isUserSelected = checkIfUserIsSelected(user.email);\n      const onUserClick = () => handleSelectUser(user.email);\n      return (\n        <UsersTableRow\n          {...user}\n          isSelected={isUserSelected}\n          onClick={onUserClick}\n          key={user.email}\n        />\n      );\n    })}\n    {!usersAreLoading && <Button onClick={resetUsers} type={RESET_BTN_TYPE}/>}\n  </>\n);\n\nexport default UsersTable;\n","import { gql } from 'apollo-boost';\n\nexport const UPDATE_USER_MUTATION = gql`\n  mutation updateUser($email: ID!, $newAttributes: UserAttributesInput!) {\n    updateUser(email: $email, newAttributes: $newAttributes) {\n      email\n      name\n      role\n    }\n  }\n`;\n\nexport const DELETE_USERS_MUTATION = gql`\n  mutation deleteUsers($emails: [ID]!) {\n    deleteUsers(emails: $emails)\n  }\n`;\n\nexport const RESET_USERS_MUTATION = gql`\n  mutation resetUsers {\n    resetUsers\n  }\n`;\n","import { gql } from 'apollo-boost';\n\nexport const ALL_USERS_QUERY = gql`\n  query getAllUsers {\n    allUsers {\n      email\n      name\n      role\n    }\n  }\n`;\n\nexport const USER_QUERY = gql`\n  query getUser($email: ID!) {\n    user(email: $email) {\n      name\n      role\n      email\n    }\n  }\n`;\n","import { useState } from 'react';\n\nconst useSelectedUsers = () => {\n  const [selectedUsers, setSelectedUsers] = useState([]);\n\n  const checkIfUserIsSelected = (user) => selectedUsers.includes(user);\n\n  const clearSelectedUsers = () => setSelectedUsers([]);\n\n  const handleSelectUser = (user) => {\n    const userIsSelected = checkIfUserIsSelected(user);\n\n    let updatedSelectedUsers = [];\n    if (userIsSelected) {\n      updatedSelectedUsers = selectedUsers.filter((selectedUser) => selectedUser !== user);\n    } else {\n      updatedSelectedUsers = [...selectedUsers, user];\n    }\n\n    setSelectedUsers(updatedSelectedUsers);\n  };\n\n  return { selectedUsers, handleSelectUser, checkIfUserIsSelected, clearSelectedUsers };\n};\n\nexport default useSelectedUsers;\n","import React, { useContext, useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport { createContext } from 'react';\nimport { DELETE_USERS_MUTATION, RESET_USERS_MUTATION } from '../graphql/mutations/usersMutations';\nimport { ALL_USERS_QUERY } from '../graphql/queries/usersQueries';\nimport useSelectedUsers from '../pages/Main/UsersTable/hooks/useSelectedUsers';\n\nconst UsersContext = createContext(null);\n\nexport const UsersContextProvider = ({ children }) => {\n  const [isLoading, setLoading] = useState(true);\n  const [users, setUsers] = useState([]);\n  const { selectedUsers, handleSelectUser, checkIfUserIsSelected, clearSelectedUsers } =\n    useSelectedUsers();\n\n  const { refetch: refetchUsers } = useQuery(ALL_USERS_QUERY, {\n    onCompleted: ({ allUsers }) => {\n      setUsers(allUsers);\n      setLoading(false);\n    },\n    fetchPolicy: 'network-only',\n  });\n\n  const [deleteUsers] = useMutation(DELETE_USERS_MUTATION, {\n    variables: {\n      emails: selectedUsers,\n    },\n    onCompleted: () => {\n      updateUsers();\n      clearSelectedUsers();\n      setLoading(false);\n    }\n  });\n\n  const [resetUsers] = useMutation(RESET_USERS_MUTATION, {\n    onCompleted: async () => {\n      const { data } = await refetchUsers();\n      setUsers(data.allUsers || []);\n      setLoading(false);\n    }\n  });\n\n  const updateUsers = () => {\n    const updatedUsers = users.filter((user) => !checkIfUserIsSelected(user.email))\n    setUsers(updatedUsers);\n  }\n\n  const handleDeleteUsers = () => {\n    setLoading(true);\n    deleteUsers();\n  };\n\n  const handleResetUsers = () => {\n    setLoading(true);\n    resetUsers();\n  }\n\n  return (\n    <UsersContext.Provider\n      value={{\n        selectedUsers,\n        users,\n        usersAreLoading: isLoading,\n        handleSelectUser,\n        checkIfUserIsSelected,\n        deleteUsers: handleDeleteUsers,\n        resetUsers: handleResetUsers\n      }}\n    >\n      {children}\n    </UsersContext.Provider>\n  );\n};\n\nexport const useUsersContext = () => useContext(UsersContext);\n","import React from 'react';\nimport PageContainer from '../../components/PageContainer/PageContainer';\nimport UsersTable from './UsersTable/UsersTable';\nimport { UsersContextProvider, useUsersContext } from '../../context/useUsersContext';\nimport { DELETE_BTN_TYPE } from '../../components/Button/constants/buttonTypes';\nimport './mainPage.scss';\n\nconst MainPage = () => {\n  const {\n    selectedUsers,\n    checkIfUserIsSelected,\n    handleSelectUser,\n    deleteUsers,\n    resetUsers,\n    users,\n    usersAreLoading,\n  } = useUsersContext();\n\n  const deleteUsersBtnProps = {\n    onClick: deleteUsers,\n    isDisabled: !selectedUsers.length || usersAreLoading,\n    type: DELETE_BTN_TYPE,\n  };\n\n  return (\n    <PageContainer pageTitle=\"Users\" pageHeaderButtonProps={deleteUsersBtnProps}>\n      <UsersTable\n        resetUsers={resetUsers}\n        handleSelectUser={handleSelectUser}\n        selectedUsers={selectedUsers}\n        usersAreLoading={usersAreLoading}\n        users={users}\n        checkIfUserIsSelected={checkIfUserIsSelected}\n      />\n    </PageContainer>\n  );\n};\n\nexport default () => (\n  <UsersContextProvider>\n    <MainPage />\n  </UsersContextProvider>\n);\n","\nimport React, { useState, useEffect } from 'react';\nimport PageContainer from '../../components/PageContainer/PageContainer';\nimport UserNameInput from './UserNameInput/UserNameInput';\nimport {\n  UserDetailsContextProvider,\n} from '../../context/useUserDetailsContext';\nimport UserRoles from './UserRoles/UserRoles';\nimport './userDetailsPage.scss';\n\nconst UserDetailsPage = () => {\n  const [text, setText] = useState('');\n  const [text2, setText2] = useState('');\n\n  useEffect(() => {\n    setTimeout(() => {\n      setText('Diana Aralin is the best girl ever I promise ERA LIN')\n    }, 1000);\n\n    setTimeout(() => {\n      setText2('Long Data Taking Some ERA LIN Juice Cat Gets Claws')\n    }, 5000);\n  }, [])\n\n  return (\n      <div className=\"details-page-body\">\n        <h2>{text}</h2>\n        <p>FILLER GO AHEAD RANDOM SLURP DRINK GAS STATION</p>\n        <h3>{text2}</h3>\n      </div>\n  );\n};\n\nexport default UserDetailsPage;\n","import { useMutation, useQuery } from '@apollo/react-hooks';\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { UPDATE_USER_MUTATION } from '../graphql/mutations/usersMutations';\nimport { USER_QUERY } from '../graphql/queries/usersQueries';\nimport useURLSearchParams from '../shared/hooks/useURLSearchParams';\n\nconst UserDetailsContext = createContext(null);\n\nexport const UserDetailsContextProvider = ({ children }) => {\n  const userEmail = useURLSearchParams('user');\n\n  // We introduce this piece of state so we know if the user details have been modified.\n  // If not, we'll disable the Save button to avoid unnecessary network calls\n  const [formIsDirty, setFormDirty] = useState(false);\n  const [initialName, setInitialName] = useState('');\n  const [initialRole, setInitialRole] = useState('');\n\n  const [isLoading, setLoading] = useState(true);\n  const [userName, setUserName] = useState('');\n  const [userRole, setUserRole] = useState('');\n\n  const handleUserNameChange = ({ target }) => setUserName(target.value || '');\n  const handleUserRoleChange = ({ target }) => setUserRole(target.value || '');\n\n  const [hasError, setHasError] = useState(false);\n\n  useQuery(USER_QUERY, {\n    variables: {\n      email: userEmail,\n    },\n    onCompleted: ({ user }) => {\n      setLoading(false);\n      setUserName(user.name);\n      setInitialName(user.name);\n      setUserRole(user.role);\n      setInitialRole(user.role);\n    },\n    onError: () => {\n      setHasError(true);\n      setLoading(false);\n    }\n  });\n\n  const [updateUser] = useMutation(UPDATE_USER_MUTATION, {\n    variables: {\n      email: userEmail,\n      newAttributes: {\n        name: userName,\n        role: userRole,\n      },\n    },\n    onCompleted: () => setLoading(false),\n  });\n\n  const handleUpdateUser = () => {\n    setLoading(true);\n    updateUser();\n  };\n\n  useEffect(() => {\n    if (initialName === userName && initialRole === userRole) setFormDirty(false);\n    else setFormDirty(true);\n  }, [initialName, initialRole, userName, userRole]);\n\n  return (\n    <UserDetailsContext.Provider\n      value={{\n        userEmail,\n        userRole,\n        userName,\n        formIsDirty,\n        hasError,\n        userDetailsAreLoading: isLoading,\n        handleUpdateUser,\n        handleUserNameChange,\n        handleUserRoleChange,\n      }}\n    >\n      {children}\n    </UserDetailsContext.Provider>\n  );\n};\n\nexport const useUserDetailsContext = () => useContext(UserDetailsContext);\n","export const ADMIN_ROLE = 'ADMIN';\nexport const DEVELOPER_ROLE = 'DEVELOPER';\nexport const APP_MANAGER_ROLE = 'APP_MANAGER';\nexport const MARKETING_ROLE = 'MARKETING';\nexport const SALES_ROLE = 'SALES';\n\nexport const userRoles = [ADMIN_ROLE, DEVELOPER_ROLE, APP_MANAGER_ROLE, MARKETING_ROLE, SALES_ROLE];\n\nexport const userRoleLabelsEnum = {\n  [ADMIN_ROLE]: 'Admin',\n  [DEVELOPER_ROLE]: 'Developer',\n  [APP_MANAGER_ROLE]: 'App Manager',\n  [MARKETING_ROLE]: 'Marketing',\n  [SALES_ROLE]: 'Sales',\n};\n","import React from 'react';\nimport { Navigate, useRoutes } from 'react-router-dom';\n\nimport MainPage from './pages/Main/MainPage';\nimport UserDetailsPage from './pages/UserDetails/UserDetailsPage';\n\nconst AppRouter = () => {\n  const routes = useRoutes([\n    {\n      path: '/',\n      children: [\n        {\n          path: '/',\n          element: <Navigate to=\"main\" />,\n        },\n        {\n          path: 'main',\n          element: <MainPage />,\n        },\n        { path: 'details', element: <UserDetailsPage /> },\n      ],\n    },\n  ]);\n\n  return routes;\n};\n\nexport default AppRouter;\n","import ApolloClient from 'apollo-boost';\n// import env from '../env.js';\n\nconst client = new ApolloClient({\n  uri: '',\n  request: (operation) => {\n    operation.setContext({\n      headers: {\n        // 'x-api-key': env.GRAPHQL_API_KEY,\n      },\n    });\n  },\n});\n\nexport default client;\n","import { ApolloProvider } from '@apollo/react-hooks';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport AppRouter from './AppRouter';\nimport apolloClient from './graphql/apolloClient';\nimport './global.scss';\n\nconst Root = () => (\n  <ApolloProvider client={apolloClient}>\n    <HashRouter>\n      <AppRouter />\n    </HashRouter>\n  </ApolloProvider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}